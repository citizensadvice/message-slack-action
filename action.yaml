name: Send Slack Notification
description: Send a notification to Slack 

inputs:
  title:
    description: Title of the notification
    required: true
  message:
    description: Message to be sent
    required: true
  channel_id:
    description: Channel IDs to send the notification to
    required: true
  slack_bot_token:
    description: Slack bot token
    required: true
  github_token:
    description: Github token
    required: true

outputs:
  message_ts:
    description: Slack message timestamp
    value: ${{ steps.deployment_message.outputs.message_ts }}

runs:
  using: 'composite'
  steps:
    - name: Get Commit Message
      shell: bash
      id: commit
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: echo message=$(gh api /repos/${{ github.repository }}/commits/${{ github.sha }} --jq '.commit.message' | head -1 | tr -d '"') >> "$GITHUB_OUTPUT"
      # The head -1 is there to ensure multi-line commit messages don't break
      # the formatting of the JSON payload as CR/LF control chars are unable
      # to be escaped cleanly.

    - name: Format Commit Hash
      shell: bash 
      id: hash
      run: echo hash=$(echo "${{ github.sha }}" | head -c 7) >> "$GITHUB_OUTPUT"

    - name: Get Commit Author
      shell: bash
      id: author
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        echo name=$(gh api /repos/${{ github.repository }}/commits/${{ github.sha }} --jq '.author.login') >> "$GITHUB_OUTPUT"
        echo url=$(gh api /repos/${{ github.repository }}/commits/${{ github.sha }} --jq '.author.html_url') >> "$GITHUB_OUTPUT"
    
    - name: Get Triggering Actor URL
      shell: bash
      id: triggering-actor
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        echo url=$(gh api /users/${{ github.triggering_actor }} --jq '.html_url') >> "$GITHUB_OUTPUT"


    - name: Notify Slack
      id: deployment_message
      uses: slackapi/slack-github-action@v2.0.0
      with:
        method: chat.postMessage
        token: ${{ inputs.slack_bot_token }}
        payload: |
          unfurl_links: false
          unfurl_media: false
          channel: ${{ inputs.channel_id }}
          text: "${{ inputs.title }}"
          blocks:
            - type: header
              text:
                type: plain_text
                text: "${{ inputs.title }}"
                emoji: true
            - type: section
              text:
                type: mrkdwn
                text: ${{ toJson(inputs.message) }}
            - type: divider
            - type: section
              text:
                type: mrkdwn
                text: "*Head Commit Message:*\n```${{ steps.commit.outputs.message }}```"
            - type: divider
            - type: section
              fields:
                - type: mrkdwn
                  text: "*Event:*\n${{ github.event_name	}}"
                - type: mrkdwn
                  text: "*Triggered By:*\n<${{ steps.triggering-actor.outputs.url }}|${{ github.triggering_actor }}>"
                - type: mrkdwn
                  text: "*Ref:*\n${{ github.ref_type }} <${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>"
                - type: mrkdwn
                  text: "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                - type: mrkdwn
                  text: "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ steps.hash.outputs.hash }}>"
                - type: mrkdwn
                  text: "*Commit Author:*\n<${{ steps.author.outputs.url }}|${{ steps.author.outputs.name }}>"
    
    - name: Find Failing Jobs
      shell: bash
      id: failing_jobs
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        gh run view ${{ github.run_id }} --repo ${{ github.repository }} --json jobs > jobs.json

        tee format.py <<EOF
        import json
        from textwrap import dedent

        for job in json.load(open("jobs.json"))["jobs"]:
            if job["conclusion"] == "failure":
                print(
                    dedent(f"""
                    - type: section
                      text:
                        type: mrkdwn
                        text: 'â€¢ <{job['url']}|{job['name']}>'""").strip()
                )
        EOF
        echo 'jobs<<EOF' >> $GITHUB_OUTPUT
        python format.py >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT


    - name: Comment Failing Jobs
      uses: slackapi/slack-github-action@v2.0.0
      if: steps.failing_jobs.outputs.jobs != ''
      with:
        method: chat.postMessage
        token: ${{ inputs.slack_bot_token }}
        payload: |
          channel: ${{ inputs.channel_id }}
          thread_ts: ${{ steps.deployment_message.outputs.ts }}
          unfurl_links: false
          unfurl_media: false
          text: "Failing Jobs"
          blocks:
            - type: header
              text:
                type: plain_text
                text: "Failing Jobs:"
            ${{ steps.failing_jobs.outputs.jobs }}
