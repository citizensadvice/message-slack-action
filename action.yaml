name: Send Slack Notification
description: Send a notification to Slack 

inputs:
  title:
    description: Title of the notification
    required: true
  message:
    description: Message to be sent
    required: true
  channel_id:
    description: Channel IDs to send the notification to
    required: true
  slack_bot_token:
    description: Slack bot token
    required: true
  github_token:
    description: Github token
    required: true

outputs:
  message_ts:
    description: Slack message timestamp
    value: ${{ steps.deployment_message.outputs.message_ts }}

runs:
  using: 'composite'
  steps:
    - name: Get Commit Message
      shell: bash
      id: commit
      run: echo message=$(gh api /repos/${{ github.repository }}/git/commits/${{ github.sha }} --jq '.message') >> "$GITHUB_OUTPUT"

    - name: Format Commit Hash
      shell: bash 
      id: hash
      run: echo hash=$(echo "${{ github.sha }}" | head -c 7) >> "$GITHUB_OUTPUT"

    - name: Get Commit Author
      shell: bash
      id: author
      run: |
        echo name=$(gh api /repos/${{ github.repository }}/commits/${{ github.sha }} --jq '.author.login') >> "$GITHUB_OUTPUT"
        echo url=$(gh api /repos/${{ github.repository }}/commits/${{ github.sha }} --jq '.author.html_url')
    
    - name: Get Triggering Actor URL
      shell: bash
      id: triggering-actor
      run: |
        echo url=$(gh api /users/${{ github.triggering_actor }} --jq '.html_url') >> "$GITHUB_OUTPUT"


    - name: Notify Slack
      id: deployment_message
      uses: slackapi/slack-github-action@v1.26.0
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
      with:
        channel-id: '${{ inputs.channel_id }}'
        payload: |
          {
            "unfurl_links": false,
            "unfurl_media": false,
            "text": "${{ inputs.title }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ inputs.title }}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJson(inputs.message) }}
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Head Commit Message:*\n```${{ steps.commit.outputs.message }}```"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Event:*\n${{ github.event_name	}}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Triggered By:*\n<${{ steps.triggering-actor.outputs.url }}|${{ github.triggering_actor }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Branch:*\n${{ github.ref_type }} <${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}|${{ github.ref_name }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ steps.hash.outputs.hash }}>"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit Author:*\n<${{ steps.author.outputs.url }}|${{ steps.author.outputs.name }}>"
                  }
                ]
              }
            ]
          }
    
    - name: Find Failing Jobs
      shell: bash
      id: failing_jobs
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        echo jobs=$(gh run view ${{ github.run_id }} --repo ${{ github.repository }} --json jobs | jq '.jobs[] | select(.conclusion == "failure")' | jq -rs '.[] | "â€¢ <\(.url)|\(.name)>\n"') >> $GITHUB_OUTPUT
        # There is a lot going on here so I will break it down step-by-step:
        # - Get the job info from the current (failed) workflow run in JSON format
        # - Pipe it to jq to get only the jobs that failed
        # - Pipe that back into jq and construct a Slack link with the job name and URL

    - name: Comment Failing Jobs
      uses: slackapi/slack-github-action@v1.26.0
      if: steps.failing_jobs.outputs.jobs != ''
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
      with:
        channel-id: '${{ inputs.channel_id }}'
        payload: |
          {
            "thread_ts": "${{ steps.deployment_message.outputs.ts }}",
            "unfurl_links": false,
            "unfurl_media": false,
            "text": "Failing Jobs:",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Failing Jobs:"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJson(steps.failing_jobs.outputs.jobs) }}
                }
              }
            ]
          }
